# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import scalardb_cluster_pb2 as scalardb__cluster__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in scalardb_cluster_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DistributedTransactionStub(object):
    """Service that provides a distributed transaction capability for ScalarDB Cluster.

    First, you call `Begin` to initiate a transaction. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Get`, `Scan`, `Put`
    , `Insert`, `Upsert`, `Update`, `Delete`, `Mutate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Begin',
                request_serializer=scalardb__cluster__pb2.BeginRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.BeginResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Get',
                request_serializer=scalardb__cluster__pb2.GetRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Scan = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Scan',
                request_serializer=scalardb__cluster__pb2.ScanRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.ScanResponse.FromString,
                _registered_method=True)
        self.Put = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Put',
                request_serializer=scalardb__cluster__pb2.PutRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.PutResponse.FromString,
                _registered_method=True)
        self.Insert = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Insert',
                request_serializer=scalardb__cluster__pb2.InsertRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.InsertResponse.FromString,
                _registered_method=True)
        self.Upsert = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Upsert',
                request_serializer=scalardb__cluster__pb2.UpsertRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.UpsertResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Update',
                request_serializer=scalardb__cluster__pb2.UpdateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Delete',
                request_serializer=scalardb__cluster__pb2.DeleteRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.Mutate = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Mutate',
                request_serializer=scalardb__cluster__pb2.MutateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.MutateResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Commit',
                request_serializer=scalardb__cluster__pb2.CommitRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Rollback = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransaction/Rollback',
                request_serializer=scalardb__cluster__pb2.RollbackRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RollbackResponse.FromString,
                _registered_method=True)


class DistributedTransactionServicer(object):
    """Service that provides a distributed transaction capability for ScalarDB Cluster.

    First, you call `Begin` to initiate a transaction. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Get`, `Scan`, `Put`
    , `Insert`, `Upsert`, `Update`, `Delete`, `Mutate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    def Begin(self, request, context):
        """Begins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Retrieves records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scan(self, request, context):
        """Scans records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Put(self, request, context):
        """Puts records.
        This is deprecated As of release 3.13.0. Will be removed in release 5.0.0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Inserts records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upsert(self, request, context):
        """Upserts records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Updates records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Deletes records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mutate(self, request, context):
        """Mutates (puts, inserts, upserts, updates, and deletes) multiple records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commits a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Rolls back a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedTransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=scalardb__cluster__pb2.BeginRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.BeginResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=scalardb__cluster__pb2.GetRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetResponse.SerializeToString,
            ),
            'Scan': grpc.unary_unary_rpc_method_handler(
                    servicer.Scan,
                    request_deserializer=scalardb__cluster__pb2.ScanRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.ScanResponse.SerializeToString,
            ),
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=scalardb__cluster__pb2.PutRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.PutResponse.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=scalardb__cluster__pb2.InsertRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.InsertResponse.SerializeToString,
            ),
            'Upsert': grpc.unary_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=scalardb__cluster__pb2.UpsertRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.UpsertResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=scalardb__cluster__pb2.UpdateRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.UpdateResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=scalardb__cluster__pb2.DeleteRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DeleteResponse.SerializeToString,
            ),
            'Mutate': grpc.unary_unary_rpc_method_handler(
                    servicer.Mutate,
                    request_deserializer=scalardb__cluster__pb2.MutateRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.MutateResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=scalardb__cluster__pb2.CommitRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CommitResponse.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=scalardb__cluster__pb2.RollbackRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RollbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.DistributedTransaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.DistributedTransaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedTransaction(object):
    """Service that provides a distributed transaction capability for ScalarDB Cluster.

    First, you call `Begin` to initiate a transaction. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Get`, `Scan`, `Put`
    , `Insert`, `Upsert`, `Update`, `Delete`, `Mutate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Begin',
            scalardb__cluster__pb2.BeginRequest.SerializeToString,
            scalardb__cluster__pb2.BeginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Get',
            scalardb__cluster__pb2.GetRequest.SerializeToString,
            scalardb__cluster__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Scan',
            scalardb__cluster__pb2.ScanRequest.SerializeToString,
            scalardb__cluster__pb2.ScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Put',
            scalardb__cluster__pb2.PutRequest.SerializeToString,
            scalardb__cluster__pb2.PutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Insert',
            scalardb__cluster__pb2.InsertRequest.SerializeToString,
            scalardb__cluster__pb2.InsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Upsert',
            scalardb__cluster__pb2.UpsertRequest.SerializeToString,
            scalardb__cluster__pb2.UpsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Update',
            scalardb__cluster__pb2.UpdateRequest.SerializeToString,
            scalardb__cluster__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Delete',
            scalardb__cluster__pb2.DeleteRequest.SerializeToString,
            scalardb__cluster__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mutate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Mutate',
            scalardb__cluster__pb2.MutateRequest.SerializeToString,
            scalardb__cluster__pb2.MutateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Commit',
            scalardb__cluster__pb2.CommitRequest.SerializeToString,
            scalardb__cluster__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransaction/Rollback',
            scalardb__cluster__pb2.RollbackRequest.SerializeToString,
            scalardb__cluster__pb2.RollbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TwoPhaseCommitTransactionStub(object):
    """Service that provides a two-phase commit transaction capability for ScalarDB Cluster.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Prepare`, `Validate`, and then
    `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction is
    committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`,
    `Delete`, `Mutate`, `Prepare`, `Validate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Begin',
                request_serializer=scalardb__cluster__pb2.BeginRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.BeginResponse.FromString,
                _registered_method=True)
        self.Join = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Join',
                request_serializer=scalardb__cluster__pb2.JoinRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Get',
                request_serializer=scalardb__cluster__pb2.GetRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Scan = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Scan',
                request_serializer=scalardb__cluster__pb2.ScanRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.ScanResponse.FromString,
                _registered_method=True)
        self.Put = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Put',
                request_serializer=scalardb__cluster__pb2.PutRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.PutResponse.FromString,
                _registered_method=True)
        self.Insert = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Insert',
                request_serializer=scalardb__cluster__pb2.InsertRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.InsertResponse.FromString,
                _registered_method=True)
        self.Upsert = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Upsert',
                request_serializer=scalardb__cluster__pb2.UpsertRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.UpsertResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Update',
                request_serializer=scalardb__cluster__pb2.UpdateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Delete',
                request_serializer=scalardb__cluster__pb2.DeleteRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DeleteResponse.FromString,
                _registered_method=True)
        self.Mutate = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Mutate',
                request_serializer=scalardb__cluster__pb2.MutateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.MutateResponse.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Prepare',
                request_serializer=scalardb__cluster__pb2.PrepareRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Validate = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Validate',
                request_serializer=scalardb__cluster__pb2.ValidateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.ValidateResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Commit',
                request_serializer=scalardb__cluster__pb2.CommitRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Rollback = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Rollback',
                request_serializer=scalardb__cluster__pb2.RollbackRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RollbackResponse.FromString,
                _registered_method=True)


class TwoPhaseCommitTransactionServicer(object):
    """Service that provides a two-phase commit transaction capability for ScalarDB Cluster.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Prepare`, `Validate`, and then
    `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction is
    committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`,
    `Delete`, `Mutate`, `Prepare`, `Validate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    def Begin(self, request, context):
        """Begins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """Joins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Retrieves records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scan(self, request, context):
        """Scans records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Put(self, request, context):
        """Puts records.
        This is deprecated As of release 3.13.0. Will be removed in release 5.0.0.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Inserts records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upsert(self, request, context):
        """Upserts records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Updates records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Deletes records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mutate(self, request, context):
        """Mutates (puts, deletes, inserts, upserts, and updates) multiple records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Prepares a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Validate(self, request, context):
        """Validates a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commits a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Rolls back a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TwoPhaseCommitTransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=scalardb__cluster__pb2.BeginRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.BeginResponse.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=scalardb__cluster__pb2.JoinRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.JoinResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=scalardb__cluster__pb2.GetRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetResponse.SerializeToString,
            ),
            'Scan': grpc.unary_unary_rpc_method_handler(
                    servicer.Scan,
                    request_deserializer=scalardb__cluster__pb2.ScanRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.ScanResponse.SerializeToString,
            ),
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=scalardb__cluster__pb2.PutRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.PutResponse.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=scalardb__cluster__pb2.InsertRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.InsertResponse.SerializeToString,
            ),
            'Upsert': grpc.unary_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=scalardb__cluster__pb2.UpsertRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.UpsertResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=scalardb__cluster__pb2.UpdateRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.UpdateResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=scalardb__cluster__pb2.DeleteRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DeleteResponse.SerializeToString,
            ),
            'Mutate': grpc.unary_unary_rpc_method_handler(
                    servicer.Mutate,
                    request_deserializer=scalardb__cluster__pb2.MutateRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.MutateResponse.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=scalardb__cluster__pb2.PrepareRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.PrepareResponse.SerializeToString,
            ),
            'Validate': grpc.unary_unary_rpc_method_handler(
                    servicer.Validate,
                    request_deserializer=scalardb__cluster__pb2.ValidateRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.ValidateResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=scalardb__cluster__pb2.CommitRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CommitResponse.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=scalardb__cluster__pb2.RollbackRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RollbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TwoPhaseCommitTransaction(object):
    """Service that provides a two-phase commit transaction capability for ScalarDB Cluster.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Then, you can call `Get` and `Scan` to read
    records, `Put`, `Insert`, `Upsert`, `Update`, and `Mutate` to write records, and `Delete` and
    `Mutate` to delete records. To finalize the transaction, call `Prepare`, `Validate`, and then
    `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction is
    committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`,
    `Delete`, `Mutate`, `Prepare`, `Validate`, `Commit`, and `Rollback`.

    Also, you can call `Get`, `Scan`, `Put`, `Insert`, `Upsert`, `Update`, `Delete`, `Mutate` without
    a transaction ID. In this case, the operation is executed within a one-shot transaction.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Begin',
            scalardb__cluster__pb2.BeginRequest.SerializeToString,
            scalardb__cluster__pb2.BeginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Join',
            scalardb__cluster__pb2.JoinRequest.SerializeToString,
            scalardb__cluster__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Get',
            scalardb__cluster__pb2.GetRequest.SerializeToString,
            scalardb__cluster__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Scan',
            scalardb__cluster__pb2.ScanRequest.SerializeToString,
            scalardb__cluster__pb2.ScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Put',
            scalardb__cluster__pb2.PutRequest.SerializeToString,
            scalardb__cluster__pb2.PutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Insert',
            scalardb__cluster__pb2.InsertRequest.SerializeToString,
            scalardb__cluster__pb2.InsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Upsert',
            scalardb__cluster__pb2.UpsertRequest.SerializeToString,
            scalardb__cluster__pb2.UpsertResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Update',
            scalardb__cluster__pb2.UpdateRequest.SerializeToString,
            scalardb__cluster__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Delete',
            scalardb__cluster__pb2.DeleteRequest.SerializeToString,
            scalardb__cluster__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mutate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Mutate',
            scalardb__cluster__pb2.MutateRequest.SerializeToString,
            scalardb__cluster__pb2.MutateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Prepare',
            scalardb__cluster__pb2.PrepareRequest.SerializeToString,
            scalardb__cluster__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Validate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Validate',
            scalardb__cluster__pb2.ValidateRequest.SerializeToString,
            scalardb__cluster__pb2.ValidateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Commit',
            scalardb__cluster__pb2.CommitRequest.SerializeToString,
            scalardb__cluster__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.TwoPhaseCommitTransaction/Rollback',
            scalardb__cluster__pb2.RollbackRequest.SerializeToString,
            scalardb__cluster__pb2.RollbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DistributedTransactionAdminStub(object):
    """Service that provides comprehensive administrative operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNamespace = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateNamespace',
                request_serializer=scalardb__cluster__pb2.CreateNamespaceRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateNamespaceResponse.FromString,
                _registered_method=True)
        self.DropNamespace = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropNamespace',
                request_serializer=scalardb__cluster__pb2.DropNamespaceRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropNamespaceResponse.FromString,
                _registered_method=True)
        self.NamespaceExists = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/NamespaceExists',
                request_serializer=scalardb__cluster__pb2.NamespaceExistsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.NamespaceExistsResponse.FromString,
                _registered_method=True)
        self.CreateTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateTable',
                request_serializer=scalardb__cluster__pb2.CreateTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateTableResponse.FromString,
                _registered_method=True)
        self.DropTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropTable',
                request_serializer=scalardb__cluster__pb2.DropTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropTableResponse.FromString,
                _registered_method=True)
        self.TruncateTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TruncateTable',
                request_serializer=scalardb__cluster__pb2.TruncateTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.TruncateTableResponse.FromString,
                _registered_method=True)
        self.TableExists = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TableExists',
                request_serializer=scalardb__cluster__pb2.TableExistsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.TableExistsResponse.FromString,
                _registered_method=True)
        self.CreateIndex = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateIndex',
                request_serializer=scalardb__cluster__pb2.CreateIndexRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateIndexResponse.FromString,
                _registered_method=True)
        self.DropIndex = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropIndex',
                request_serializer=scalardb__cluster__pb2.DropIndexRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropIndexResponse.FromString,
                _registered_method=True)
        self.IndexExists = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/IndexExists',
                request_serializer=scalardb__cluster__pb2.IndexExistsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.IndexExistsResponse.FromString,
                _registered_method=True)
        self.RepairTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RepairTable',
                request_serializer=scalardb__cluster__pb2.RepairTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RepairTableResponse.FromString,
                _registered_method=True)
        self.AddNewColumnToTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddNewColumnToTable',
                request_serializer=scalardb__cluster__pb2.AddNewColumnToTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.AddNewColumnToTableResponse.FromString,
                _registered_method=True)
        self.CreateCoordinatorTables = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateCoordinatorTables',
                request_serializer=scalardb__cluster__pb2.CreateCoordinatorTablesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateCoordinatorTablesResponse.FromString,
                _registered_method=True)
        self.DropCoordinatorTables = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropCoordinatorTables',
                request_serializer=scalardb__cluster__pb2.DropCoordinatorTablesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropCoordinatorTablesResponse.FromString,
                _registered_method=True)
        self.TruncateCoordinatorTables = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TruncateCoordinatorTables',
                request_serializer=scalardb__cluster__pb2.TruncateCoordinatorTablesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.TruncateCoordinatorTablesResponse.FromString,
                _registered_method=True)
        self.CoordinatorTablesExist = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CoordinatorTablesExist',
                request_serializer=scalardb__cluster__pb2.CoordinatorTablesExistRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CoordinatorTablesExistResponse.FromString,
                _registered_method=True)
        self.RepairCoordinatorTables = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RepairCoordinatorTables',
                request_serializer=scalardb__cluster__pb2.RepairCoordinatorTablesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RepairCoordinatorTablesResponse.FromString,
                _registered_method=True)
        self.GetTableMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTableMetadata',
                request_serializer=scalardb__cluster__pb2.GetTableMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetTableMetadataResponse.FromString,
                _registered_method=True)
        self.GetNamespaceNames = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespaceNames',
                request_serializer=scalardb__cluster__pb2.GetNamespaceNamesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetNamespaceNamesResponse.FromString,
                _registered_method=True)
        self.GetNamespaceTableNames = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespaceTableNames',
                request_serializer=scalardb__cluster__pb2.GetNamespaceTableNamesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetNamespaceTableNamesResponse.FromString,
                _registered_method=True)
        self.ImportTable = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/ImportTable',
                request_serializer=scalardb__cluster__pb2.ImportTableRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.ImportTableResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateUser',
                request_serializer=scalardb__cluster__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.AlterUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AlterUser',
                request_serializer=scalardb__cluster__pb2.AlterUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.AlterUserResponse.FromString,
                _registered_method=True)
        self.DropUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropUser',
                request_serializer=scalardb__cluster__pb2.DropUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropUserResponse.FromString,
                _registered_method=True)
        self.Grant = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/Grant',
                request_serializer=scalardb__cluster__pb2.GrantRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GrantResponse.FromString,
                _registered_method=True)
        self.Revoke = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/Revoke',
                request_serializer=scalardb__cluster__pb2.RevokeRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RevokeResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUser',
                request_serializer=scalardb__cluster__pb2.GetUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUsers',
                request_serializer=scalardb__cluster__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetUsersResponse.FromString,
                _registered_method=True)
        self.GetCurrentUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCurrentUser',
                request_serializer=scalardb__cluster__pb2.GetCurrentUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetCurrentUserResponse.FromString,
                _registered_method=True)
        self.GetPrivileges = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPrivileges',
                request_serializer=scalardb__cluster__pb2.GetPrivilegesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetPrivilegesResponse.FromString,
                _registered_method=True)
        self.CreatePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreatePolicy',
                request_serializer=scalardb__cluster__pb2.CreatePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreatePolicyResponse.FromString,
                _registered_method=True)
        self.EnablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnablePolicy',
                request_serializer=scalardb__cluster__pb2.EnablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.EnablePolicyResponse.FromString,
                _registered_method=True)
        self.DisablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisablePolicy',
                request_serializer=scalardb__cluster__pb2.DisablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DisablePolicyResponse.FromString,
                _registered_method=True)
        self.GetPolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPolicy',
                request_serializer=scalardb__cluster__pb2.GetPolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetPolicyResponse.FromString,
                _registered_method=True)
        self.GetPolicies = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPolicies',
                request_serializer=scalardb__cluster__pb2.GetPoliciesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetPoliciesResponse.FromString,
                _registered_method=True)
        self.CreateLevel = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateLevel',
                request_serializer=scalardb__cluster__pb2.CreateLevelRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateLevelResponse.FromString,
                _registered_method=True)
        self.DropLevel = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropLevel',
                request_serializer=scalardb__cluster__pb2.DropLevelRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropLevelResponse.FromString,
                _registered_method=True)
        self.GetLevel = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetLevel',
                request_serializer=scalardb__cluster__pb2.GetLevelRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetLevelResponse.FromString,
                _registered_method=True)
        self.GetLevels = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetLevels',
                request_serializer=scalardb__cluster__pb2.GetLevelsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetLevelsResponse.FromString,
                _registered_method=True)
        self.CreateCompartment = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateCompartment',
                request_serializer=scalardb__cluster__pb2.CreateCompartmentRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateCompartmentResponse.FromString,
                _registered_method=True)
        self.DropCompartment = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropCompartment',
                request_serializer=scalardb__cluster__pb2.DropCompartmentRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropCompartmentResponse.FromString,
                _registered_method=True)
        self.GetCompartment = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCompartment',
                request_serializer=scalardb__cluster__pb2.GetCompartmentRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetCompartmentResponse.FromString,
                _registered_method=True)
        self.GetCompartments = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCompartments',
                request_serializer=scalardb__cluster__pb2.GetCompartmentsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetCompartmentsResponse.FromString,
                _registered_method=True)
        self.CreateGroup = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateGroup',
                request_serializer=scalardb__cluster__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateGroupResponse.FromString,
                _registered_method=True)
        self.DropGroup = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropGroup',
                request_serializer=scalardb__cluster__pb2.DropGroupRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropGroupResponse.FromString,
                _registered_method=True)
        self.GetGroup = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetGroup',
                request_serializer=scalardb__cluster__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetGroupResponse.FromString,
                _registered_method=True)
        self.getGroups = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/getGroups',
                request_serializer=scalardb__cluster__pb2.GetGroupsRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetGroupsResponse.FromString,
                _registered_method=True)
        self.SetLevelsToUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/SetLevelsToUser',
                request_serializer=scalardb__cluster__pb2.SetLevelsToUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.SetLevelsToUserResponse.FromString,
                _registered_method=True)
        self.AddCompartmentToUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddCompartmentToUser',
                request_serializer=scalardb__cluster__pb2.AddCompartmentToUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.AddCompartmentToUserResponse.FromString,
                _registered_method=True)
        self.RemoveCompartmentFromUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RemoveCompartmentFromUser',
                request_serializer=scalardb__cluster__pb2.RemoveCompartmentFromUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RemoveCompartmentFromUserResponse.FromString,
                _registered_method=True)
        self.AddGroupToUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddGroupToUser',
                request_serializer=scalardb__cluster__pb2.AddGroupToUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.AddGroupToUserResponse.FromString,
                _registered_method=True)
        self.RemoveGroupFromUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RemoveGroupFromUser',
                request_serializer=scalardb__cluster__pb2.RemoveGroupFromUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.RemoveGroupFromUserResponse.FromString,
                _registered_method=True)
        self.DropUserTagInfoFromUser = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropUserTagInfoFromUser',
                request_serializer=scalardb__cluster__pb2.DropUserTagInfoFromUserRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DropUserTagInfoFromUserResponse.FromString,
                _registered_method=True)
        self.GetUserTagInfo = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUserTagInfo',
                request_serializer=scalardb__cluster__pb2.GetUserTagInfoRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetUserTagInfoResponse.FromString,
                _registered_method=True)
        self.CreateNamespacePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateNamespacePolicy',
                request_serializer=scalardb__cluster__pb2.CreateNamespacePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateNamespacePolicyResponse.FromString,
                _registered_method=True)
        self.EnableNamespacePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnableNamespacePolicy',
                request_serializer=scalardb__cluster__pb2.EnableNamespacePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.EnableNamespacePolicyResponse.FromString,
                _registered_method=True)
        self.DisableNamespacePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisableNamespacePolicy',
                request_serializer=scalardb__cluster__pb2.DisableNamespacePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DisableNamespacePolicyResponse.FromString,
                _registered_method=True)
        self.GetNamespacePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespacePolicy',
                request_serializer=scalardb__cluster__pb2.GetNamespacePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetNamespacePolicyResponse.FromString,
                _registered_method=True)
        self.GetNamespacePolicies = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespacePolicies',
                request_serializer=scalardb__cluster__pb2.GetNamespacePoliciesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetNamespacePoliciesResponse.FromString,
                _registered_method=True)
        self.CreateTablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateTablePolicy',
                request_serializer=scalardb__cluster__pb2.CreateTablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.CreateTablePolicyResponse.FromString,
                _registered_method=True)
        self.EnableTablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnableTablePolicy',
                request_serializer=scalardb__cluster__pb2.EnableTablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.EnableTablePolicyResponse.FromString,
                _registered_method=True)
        self.DisableTablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisableTablePolicy',
                request_serializer=scalardb__cluster__pb2.DisableTablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.DisableTablePolicyResponse.FromString,
                _registered_method=True)
        self.GetTablePolicy = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTablePolicy',
                request_serializer=scalardb__cluster__pb2.GetTablePolicyRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetTablePolicyResponse.FromString,
                _registered_method=True)
        self.GetTablePolicies = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTablePolicies',
                request_serializer=scalardb__cluster__pb2.GetTablePoliciesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__pb2.GetTablePoliciesResponse.FromString,
                _registered_method=True)


class DistributedTransactionAdminServicer(object):
    """Service that provides comprehensive administrative operations.
    """

    def CreateNamespace(self, request, context):
        """Creates a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropNamespace(self, request, context):
        """Drops a namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NamespaceExists(self, request, context):
        """Returns whether the specified namespace exists or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTable(self, request, context):
        """Creates a table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropTable(self, request, context):
        """Drops a table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TruncateTable(self, request, context):
        """Truncates a table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TableExists(self, request, context):
        """Returns whether the specified table exists or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIndex(self, request, context):
        """Creates an index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropIndex(self, request, context):
        """Drops an index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IndexExists(self, request, context):
        """Returns whether the specified index exists or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepairTable(self, request, context):
        """Repairs a table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNewColumnToTable(self, request, context):
        """Adds a new column to a table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCoordinatorTables(self, request, context):
        """Creates the Coordinator tables.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropCoordinatorTables(self, request, context):
        """Drops the Coordinator tables.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TruncateCoordinatorTables(self, request, context):
        """Truncates the Coordinator tables.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoordinatorTablesExist(self, request, context):
        """Returns whether the Coordinator tables exist or not.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RepairCoordinatorTables(self, request, context):
        """Repairs the Coordinator tables.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableMetadata(self, request, context):
        """Returns table metadata of the specified table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespaceNames(self, request, context):
        """Returns tables in the specified namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespaceTableNames(self, request, context):
        """Returns tables in the specified namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportTable(self, request, context):
        """Import an existing table that is not managed by ScalarDB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """
        Auth related endpoints


        Creates a user with the given username, password and user options.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterUser(self, request, context):
        """Alters a user with the given username, password and user options.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropUser(self, request, context):
        """Drops a user with the given username.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Grant(self, request, context):
        """Grants privileges to a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Revoke(self, request, context):
        """Revokes privileges from a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Returns a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Returns a list of users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentUser(self, request, context):
        """Returns the current logged-in user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivileges(self, request, context):
        """Returns privileges for a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePolicy(self, request, context):
        """
        Attribute-based access control (ABAC) related endpoints


        Creates a policy with the given name and data tag column name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnablePolicy(self, request, context):
        """Enables a policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisablePolicy(self, request, context):
        """Disables a policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicy(self, request, context):
        """Retrieves a policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicies(self, request, context):
        """Retrieves all policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLevel(self, request, context):
        """Creates a level with the given short name, long name and level number for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropLevel(self, request, context):
        """Drops a level that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLevel(self, request, context):
        """Retrieves a level that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLevels(self, request, context):
        """Retrieves all levels for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCompartment(self, request, context):
        """Creates a compartment with the given short name and long name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropCompartment(self, request, context):
        """Drops a compartment that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompartment(self, request, context):
        """Retrieves a compartment that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompartments(self, request, context):
        """Retrieves all compartments for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Creates a group with the given short name, long name, and the short name of the parent group
        for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropGroup(self, request, context):
        """Drops a group that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Retrieves a group that has the given short name for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGroups(self, request, context):
        """Retrieves all groups for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLevelsToUser(self, request, context):
        """Sets the given levels of the given policy to a user that has the given username.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCompartmentToUser(self, request, context):
        """Adds the given compartment of the given policy to a user that has the given username. Before
        adding the compartment, levels must be set to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCompartmentFromUser(self, request, context):
        """Removes the given compartment of the given policy from a user that has the given username.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGroupToUser(self, request, context):
        """Adds the given group of the given policy to a user that has the given username. Before adding
        the group, levels must be set to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveGroupFromUser(self, request, context):
        """Removes the given group of the given policy from a user that has the given username.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropUserTagInfoFromUser(self, request, context):
        """Drops the user tag information of a user with the given username for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserTagInfo(self, request, context):
        """Retrieves the user tag information of a user with the given username for the given policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNamespacePolicy(self, request, context):
        """Creates a namespace policy with the given policy and the given namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableNamespacePolicy(self, request, context):
        """Enables a namespace policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableNamespacePolicy(self, request, context):
        """Disables a namespace policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespacePolicy(self, request, context):
        """Retrieves a namespace policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespacePolicies(self, request, context):
        """Retrieves all namespace policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTablePolicy(self, request, context):
        """Creates a table policy with the given policy and the given table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableTablePolicy(self, request, context):
        """Enables a table policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableTablePolicy(self, request, context):
        """Disables a table policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTablePolicy(self, request, context):
        """Retrieves a table policy that has the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTablePolicies(self, request, context):
        """Retrieves all table policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedTransactionAdminServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNamespace,
                    request_deserializer=scalardb__cluster__pb2.CreateNamespaceRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateNamespaceResponse.SerializeToString,
            ),
            'DropNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DropNamespace,
                    request_deserializer=scalardb__cluster__pb2.DropNamespaceRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropNamespaceResponse.SerializeToString,
            ),
            'NamespaceExists': grpc.unary_unary_rpc_method_handler(
                    servicer.NamespaceExists,
                    request_deserializer=scalardb__cluster__pb2.NamespaceExistsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.NamespaceExistsResponse.SerializeToString,
            ),
            'CreateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTable,
                    request_deserializer=scalardb__cluster__pb2.CreateTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateTableResponse.SerializeToString,
            ),
            'DropTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DropTable,
                    request_deserializer=scalardb__cluster__pb2.DropTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropTableResponse.SerializeToString,
            ),
            'TruncateTable': grpc.unary_unary_rpc_method_handler(
                    servicer.TruncateTable,
                    request_deserializer=scalardb__cluster__pb2.TruncateTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.TruncateTableResponse.SerializeToString,
            ),
            'TableExists': grpc.unary_unary_rpc_method_handler(
                    servicer.TableExists,
                    request_deserializer=scalardb__cluster__pb2.TableExistsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.TableExistsResponse.SerializeToString,
            ),
            'CreateIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIndex,
                    request_deserializer=scalardb__cluster__pb2.CreateIndexRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateIndexResponse.SerializeToString,
            ),
            'DropIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.DropIndex,
                    request_deserializer=scalardb__cluster__pb2.DropIndexRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropIndexResponse.SerializeToString,
            ),
            'IndexExists': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexExists,
                    request_deserializer=scalardb__cluster__pb2.IndexExistsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.IndexExistsResponse.SerializeToString,
            ),
            'RepairTable': grpc.unary_unary_rpc_method_handler(
                    servicer.RepairTable,
                    request_deserializer=scalardb__cluster__pb2.RepairTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RepairTableResponse.SerializeToString,
            ),
            'AddNewColumnToTable': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNewColumnToTable,
                    request_deserializer=scalardb__cluster__pb2.AddNewColumnToTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.AddNewColumnToTableResponse.SerializeToString,
            ),
            'CreateCoordinatorTables': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCoordinatorTables,
                    request_deserializer=scalardb__cluster__pb2.CreateCoordinatorTablesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateCoordinatorTablesResponse.SerializeToString,
            ),
            'DropCoordinatorTables': grpc.unary_unary_rpc_method_handler(
                    servicer.DropCoordinatorTables,
                    request_deserializer=scalardb__cluster__pb2.DropCoordinatorTablesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropCoordinatorTablesResponse.SerializeToString,
            ),
            'TruncateCoordinatorTables': grpc.unary_unary_rpc_method_handler(
                    servicer.TruncateCoordinatorTables,
                    request_deserializer=scalardb__cluster__pb2.TruncateCoordinatorTablesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.TruncateCoordinatorTablesResponse.SerializeToString,
            ),
            'CoordinatorTablesExist': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordinatorTablesExist,
                    request_deserializer=scalardb__cluster__pb2.CoordinatorTablesExistRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CoordinatorTablesExistResponse.SerializeToString,
            ),
            'RepairCoordinatorTables': grpc.unary_unary_rpc_method_handler(
                    servicer.RepairCoordinatorTables,
                    request_deserializer=scalardb__cluster__pb2.RepairCoordinatorTablesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RepairCoordinatorTablesResponse.SerializeToString,
            ),
            'GetTableMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableMetadata,
                    request_deserializer=scalardb__cluster__pb2.GetTableMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetTableMetadataResponse.SerializeToString,
            ),
            'GetNamespaceNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespaceNames,
                    request_deserializer=scalardb__cluster__pb2.GetNamespaceNamesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetNamespaceNamesResponse.SerializeToString,
            ),
            'GetNamespaceTableNames': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespaceTableNames,
                    request_deserializer=scalardb__cluster__pb2.GetNamespaceTableNamesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetNamespaceTableNamesResponse.SerializeToString,
            ),
            'ImportTable': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportTable,
                    request_deserializer=scalardb__cluster__pb2.ImportTableRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.ImportTableResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=scalardb__cluster__pb2.CreateUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateUserResponse.SerializeToString,
            ),
            'AlterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterUser,
                    request_deserializer=scalardb__cluster__pb2.AlterUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.AlterUserResponse.SerializeToString,
            ),
            'DropUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DropUser,
                    request_deserializer=scalardb__cluster__pb2.DropUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropUserResponse.SerializeToString,
            ),
            'Grant': grpc.unary_unary_rpc_method_handler(
                    servicer.Grant,
                    request_deserializer=scalardb__cluster__pb2.GrantRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GrantResponse.SerializeToString,
            ),
            'Revoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Revoke,
                    request_deserializer=scalardb__cluster__pb2.RevokeRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RevokeResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=scalardb__cluster__pb2.GetUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetUserResponse.SerializeToString,
            ),
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=scalardb__cluster__pb2.GetUsersRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetUsersResponse.SerializeToString,
            ),
            'GetCurrentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentUser,
                    request_deserializer=scalardb__cluster__pb2.GetCurrentUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetCurrentUserResponse.SerializeToString,
            ),
            'GetPrivileges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivileges,
                    request_deserializer=scalardb__cluster__pb2.GetPrivilegesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetPrivilegesResponse.SerializeToString,
            ),
            'CreatePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePolicy,
                    request_deserializer=scalardb__cluster__pb2.CreatePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreatePolicyResponse.SerializeToString,
            ),
            'EnablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.EnablePolicy,
                    request_deserializer=scalardb__cluster__pb2.EnablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.EnablePolicyResponse.SerializeToString,
            ),
            'DisablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.DisablePolicy,
                    request_deserializer=scalardb__cluster__pb2.DisablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DisablePolicyResponse.SerializeToString,
            ),
            'GetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicy,
                    request_deserializer=scalardb__cluster__pb2.GetPolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetPolicyResponse.SerializeToString,
            ),
            'GetPolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicies,
                    request_deserializer=scalardb__cluster__pb2.GetPoliciesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetPoliciesResponse.SerializeToString,
            ),
            'CreateLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLevel,
                    request_deserializer=scalardb__cluster__pb2.CreateLevelRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateLevelResponse.SerializeToString,
            ),
            'DropLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.DropLevel,
                    request_deserializer=scalardb__cluster__pb2.DropLevelRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropLevelResponse.SerializeToString,
            ),
            'GetLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLevel,
                    request_deserializer=scalardb__cluster__pb2.GetLevelRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetLevelResponse.SerializeToString,
            ),
            'GetLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLevels,
                    request_deserializer=scalardb__cluster__pb2.GetLevelsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetLevelsResponse.SerializeToString,
            ),
            'CreateCompartment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompartment,
                    request_deserializer=scalardb__cluster__pb2.CreateCompartmentRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateCompartmentResponse.SerializeToString,
            ),
            'DropCompartment': grpc.unary_unary_rpc_method_handler(
                    servicer.DropCompartment,
                    request_deserializer=scalardb__cluster__pb2.DropCompartmentRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropCompartmentResponse.SerializeToString,
            ),
            'GetCompartment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompartment,
                    request_deserializer=scalardb__cluster__pb2.GetCompartmentRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetCompartmentResponse.SerializeToString,
            ),
            'GetCompartments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompartments,
                    request_deserializer=scalardb__cluster__pb2.GetCompartmentsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetCompartmentsResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=scalardb__cluster__pb2.CreateGroupRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateGroupResponse.SerializeToString,
            ),
            'DropGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DropGroup,
                    request_deserializer=scalardb__cluster__pb2.DropGroupRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropGroupResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=scalardb__cluster__pb2.GetGroupRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetGroupResponse.SerializeToString,
            ),
            'getGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.getGroups,
                    request_deserializer=scalardb__cluster__pb2.GetGroupsRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetGroupsResponse.SerializeToString,
            ),
            'SetLevelsToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLevelsToUser,
                    request_deserializer=scalardb__cluster__pb2.SetLevelsToUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.SetLevelsToUserResponse.SerializeToString,
            ),
            'AddCompartmentToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCompartmentToUser,
                    request_deserializer=scalardb__cluster__pb2.AddCompartmentToUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.AddCompartmentToUserResponse.SerializeToString,
            ),
            'RemoveCompartmentFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCompartmentFromUser,
                    request_deserializer=scalardb__cluster__pb2.RemoveCompartmentFromUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RemoveCompartmentFromUserResponse.SerializeToString,
            ),
            'AddGroupToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGroupToUser,
                    request_deserializer=scalardb__cluster__pb2.AddGroupToUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.AddGroupToUserResponse.SerializeToString,
            ),
            'RemoveGroupFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveGroupFromUser,
                    request_deserializer=scalardb__cluster__pb2.RemoveGroupFromUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.RemoveGroupFromUserResponse.SerializeToString,
            ),
            'DropUserTagInfoFromUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DropUserTagInfoFromUser,
                    request_deserializer=scalardb__cluster__pb2.DropUserTagInfoFromUserRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DropUserTagInfoFromUserResponse.SerializeToString,
            ),
            'GetUserTagInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTagInfo,
                    request_deserializer=scalardb__cluster__pb2.GetUserTagInfoRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetUserTagInfoResponse.SerializeToString,
            ),
            'CreateNamespacePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNamespacePolicy,
                    request_deserializer=scalardb__cluster__pb2.CreateNamespacePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateNamespacePolicyResponse.SerializeToString,
            ),
            'EnableNamespacePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableNamespacePolicy,
                    request_deserializer=scalardb__cluster__pb2.EnableNamespacePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.EnableNamespacePolicyResponse.SerializeToString,
            ),
            'DisableNamespacePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableNamespacePolicy,
                    request_deserializer=scalardb__cluster__pb2.DisableNamespacePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DisableNamespacePolicyResponse.SerializeToString,
            ),
            'GetNamespacePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespacePolicy,
                    request_deserializer=scalardb__cluster__pb2.GetNamespacePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetNamespacePolicyResponse.SerializeToString,
            ),
            'GetNamespacePolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespacePolicies,
                    request_deserializer=scalardb__cluster__pb2.GetNamespacePoliciesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetNamespacePoliciesResponse.SerializeToString,
            ),
            'CreateTablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTablePolicy,
                    request_deserializer=scalardb__cluster__pb2.CreateTablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.CreateTablePolicyResponse.SerializeToString,
            ),
            'EnableTablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableTablePolicy,
                    request_deserializer=scalardb__cluster__pb2.EnableTablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.EnableTablePolicyResponse.SerializeToString,
            ),
            'DisableTablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableTablePolicy,
                    request_deserializer=scalardb__cluster__pb2.DisableTablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.DisableTablePolicyResponse.SerializeToString,
            ),
            'GetTablePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTablePolicy,
                    request_deserializer=scalardb__cluster__pb2.GetTablePolicyRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetTablePolicyResponse.SerializeToString,
            ),
            'GetTablePolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTablePolicies,
                    request_deserializer=scalardb__cluster__pb2.GetTablePoliciesRequest.FromString,
                    response_serializer=scalardb__cluster__pb2.GetTablePoliciesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.DistributedTransactionAdmin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.DistributedTransactionAdmin', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedTransactionAdmin(object):
    """Service that provides comprehensive administrative operations.
    """

    @staticmethod
    def CreateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateNamespace',
            scalardb__cluster__pb2.CreateNamespaceRequest.SerializeToString,
            scalardb__cluster__pb2.CreateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropNamespace',
            scalardb__cluster__pb2.DropNamespaceRequest.SerializeToString,
            scalardb__cluster__pb2.DropNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NamespaceExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/NamespaceExists',
            scalardb__cluster__pb2.NamespaceExistsRequest.SerializeToString,
            scalardb__cluster__pb2.NamespaceExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateTable',
            scalardb__cluster__pb2.CreateTableRequest.SerializeToString,
            scalardb__cluster__pb2.CreateTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropTable',
            scalardb__cluster__pb2.DropTableRequest.SerializeToString,
            scalardb__cluster__pb2.DropTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TruncateTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TruncateTable',
            scalardb__cluster__pb2.TruncateTableRequest.SerializeToString,
            scalardb__cluster__pb2.TruncateTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TableExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TableExists',
            scalardb__cluster__pb2.TableExistsRequest.SerializeToString,
            scalardb__cluster__pb2.TableExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateIndex',
            scalardb__cluster__pb2.CreateIndexRequest.SerializeToString,
            scalardb__cluster__pb2.CreateIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropIndex',
            scalardb__cluster__pb2.DropIndexRequest.SerializeToString,
            scalardb__cluster__pb2.DropIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IndexExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/IndexExists',
            scalardb__cluster__pb2.IndexExistsRequest.SerializeToString,
            scalardb__cluster__pb2.IndexExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RepairTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RepairTable',
            scalardb__cluster__pb2.RepairTableRequest.SerializeToString,
            scalardb__cluster__pb2.RepairTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddNewColumnToTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddNewColumnToTable',
            scalardb__cluster__pb2.AddNewColumnToTableRequest.SerializeToString,
            scalardb__cluster__pb2.AddNewColumnToTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCoordinatorTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateCoordinatorTables',
            scalardb__cluster__pb2.CreateCoordinatorTablesRequest.SerializeToString,
            scalardb__cluster__pb2.CreateCoordinatorTablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropCoordinatorTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropCoordinatorTables',
            scalardb__cluster__pb2.DropCoordinatorTablesRequest.SerializeToString,
            scalardb__cluster__pb2.DropCoordinatorTablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TruncateCoordinatorTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/TruncateCoordinatorTables',
            scalardb__cluster__pb2.TruncateCoordinatorTablesRequest.SerializeToString,
            scalardb__cluster__pb2.TruncateCoordinatorTablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CoordinatorTablesExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CoordinatorTablesExist',
            scalardb__cluster__pb2.CoordinatorTablesExistRequest.SerializeToString,
            scalardb__cluster__pb2.CoordinatorTablesExistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RepairCoordinatorTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RepairCoordinatorTables',
            scalardb__cluster__pb2.RepairCoordinatorTablesRequest.SerializeToString,
            scalardb__cluster__pb2.RepairCoordinatorTablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTableMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTableMetadata',
            scalardb__cluster__pb2.GetTableMetadataRequest.SerializeToString,
            scalardb__cluster__pb2.GetTableMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespaceNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespaceNames',
            scalardb__cluster__pb2.GetNamespaceNamesRequest.SerializeToString,
            scalardb__cluster__pb2.GetNamespaceNamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespaceTableNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespaceTableNames',
            scalardb__cluster__pb2.GetNamespaceTableNamesRequest.SerializeToString,
            scalardb__cluster__pb2.GetNamespaceTableNamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImportTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/ImportTable',
            scalardb__cluster__pb2.ImportTableRequest.SerializeToString,
            scalardb__cluster__pb2.ImportTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateUser',
            scalardb__cluster__pb2.CreateUserRequest.SerializeToString,
            scalardb__cluster__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AlterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AlterUser',
            scalardb__cluster__pb2.AlterUserRequest.SerializeToString,
            scalardb__cluster__pb2.AlterUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropUser',
            scalardb__cluster__pb2.DropUserRequest.SerializeToString,
            scalardb__cluster__pb2.DropUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Grant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/Grant',
            scalardb__cluster__pb2.GrantRequest.SerializeToString,
            scalardb__cluster__pb2.GrantResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Revoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/Revoke',
            scalardb__cluster__pb2.RevokeRequest.SerializeToString,
            scalardb__cluster__pb2.RevokeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUser',
            scalardb__cluster__pb2.GetUserRequest.SerializeToString,
            scalardb__cluster__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUsers',
            scalardb__cluster__pb2.GetUsersRequest.SerializeToString,
            scalardb__cluster__pb2.GetUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCurrentUser',
            scalardb__cluster__pb2.GetCurrentUserRequest.SerializeToString,
            scalardb__cluster__pb2.GetCurrentUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivileges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPrivileges',
            scalardb__cluster__pb2.GetPrivilegesRequest.SerializeToString,
            scalardb__cluster__pb2.GetPrivilegesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreatePolicy',
            scalardb__cluster__pb2.CreatePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.CreatePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnablePolicy',
            scalardb__cluster__pb2.EnablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.EnablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisablePolicy',
            scalardb__cluster__pb2.DisablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.DisablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPolicy',
            scalardb__cluster__pb2.GetPolicyRequest.SerializeToString,
            scalardb__cluster__pb2.GetPolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetPolicies',
            scalardb__cluster__pb2.GetPoliciesRequest.SerializeToString,
            scalardb__cluster__pb2.GetPoliciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateLevel',
            scalardb__cluster__pb2.CreateLevelRequest.SerializeToString,
            scalardb__cluster__pb2.CreateLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropLevel',
            scalardb__cluster__pb2.DropLevelRequest.SerializeToString,
            scalardb__cluster__pb2.DropLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetLevel',
            scalardb__cluster__pb2.GetLevelRequest.SerializeToString,
            scalardb__cluster__pb2.GetLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetLevels',
            scalardb__cluster__pb2.GetLevelsRequest.SerializeToString,
            scalardb__cluster__pb2.GetLevelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCompartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateCompartment',
            scalardb__cluster__pb2.CreateCompartmentRequest.SerializeToString,
            scalardb__cluster__pb2.CreateCompartmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropCompartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropCompartment',
            scalardb__cluster__pb2.DropCompartmentRequest.SerializeToString,
            scalardb__cluster__pb2.DropCompartmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCompartment',
            scalardb__cluster__pb2.GetCompartmentRequest.SerializeToString,
            scalardb__cluster__pb2.GetCompartmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompartments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetCompartments',
            scalardb__cluster__pb2.GetCompartmentsRequest.SerializeToString,
            scalardb__cluster__pb2.GetCompartmentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateGroup',
            scalardb__cluster__pb2.CreateGroupRequest.SerializeToString,
            scalardb__cluster__pb2.CreateGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropGroup',
            scalardb__cluster__pb2.DropGroupRequest.SerializeToString,
            scalardb__cluster__pb2.DropGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetGroup',
            scalardb__cluster__pb2.GetGroupRequest.SerializeToString,
            scalardb__cluster__pb2.GetGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/getGroups',
            scalardb__cluster__pb2.GetGroupsRequest.SerializeToString,
            scalardb__cluster__pb2.GetGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetLevelsToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/SetLevelsToUser',
            scalardb__cluster__pb2.SetLevelsToUserRequest.SerializeToString,
            scalardb__cluster__pb2.SetLevelsToUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCompartmentToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddCompartmentToUser',
            scalardb__cluster__pb2.AddCompartmentToUserRequest.SerializeToString,
            scalardb__cluster__pb2.AddCompartmentToUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveCompartmentFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RemoveCompartmentFromUser',
            scalardb__cluster__pb2.RemoveCompartmentFromUserRequest.SerializeToString,
            scalardb__cluster__pb2.RemoveCompartmentFromUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddGroupToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/AddGroupToUser',
            scalardb__cluster__pb2.AddGroupToUserRequest.SerializeToString,
            scalardb__cluster__pb2.AddGroupToUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveGroupFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/RemoveGroupFromUser',
            scalardb__cluster__pb2.RemoveGroupFromUserRequest.SerializeToString,
            scalardb__cluster__pb2.RemoveGroupFromUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DropUserTagInfoFromUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DropUserTagInfoFromUser',
            scalardb__cluster__pb2.DropUserTagInfoFromUserRequest.SerializeToString,
            scalardb__cluster__pb2.DropUserTagInfoFromUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserTagInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetUserTagInfo',
            scalardb__cluster__pb2.GetUserTagInfoRequest.SerializeToString,
            scalardb__cluster__pb2.GetUserTagInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNamespacePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateNamespacePolicy',
            scalardb__cluster__pb2.CreateNamespacePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.CreateNamespacePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableNamespacePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnableNamespacePolicy',
            scalardb__cluster__pb2.EnableNamespacePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.EnableNamespacePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableNamespacePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisableNamespacePolicy',
            scalardb__cluster__pb2.DisableNamespacePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.DisableNamespacePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespacePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespacePolicy',
            scalardb__cluster__pb2.GetNamespacePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.GetNamespacePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespacePolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetNamespacePolicies',
            scalardb__cluster__pb2.GetNamespacePoliciesRequest.SerializeToString,
            scalardb__cluster__pb2.GetNamespacePoliciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/CreateTablePolicy',
            scalardb__cluster__pb2.CreateTablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.CreateTablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableTablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/EnableTablePolicy',
            scalardb__cluster__pb2.EnableTablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.EnableTablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableTablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/DisableTablePolicy',
            scalardb__cluster__pb2.DisableTablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.DisableTablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTablePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTablePolicy',
            scalardb__cluster__pb2.GetTablePolicyRequest.SerializeToString,
            scalardb__cluster__pb2.GetTablePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTablePolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.DistributedTransactionAdmin/GetTablePolicies',
            scalardb__cluster__pb2.GetTablePoliciesRequest.SerializeToString,
            scalardb__cluster__pb2.GetTablePoliciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
