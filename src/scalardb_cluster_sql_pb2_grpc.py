# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import scalardb_cluster_sql_pb2 as scalardb__cluster__sql__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in scalardb_cluster_sql_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SqlTransactionStub(object):
    """Service that provides a transaction capability for ScalarDB Cluster SQL.

    First, you call `Begin` to initiate a transaction. Following that, you can call `Execute`to read,
    write, and delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Execute`, `Commit`,
    and `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Begin',
                request_serializer=scalardb__cluster__sql__pb2.BeginRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.BeginResponse.FromString,
                _registered_method=True)
        self.Execute = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Execute',
                request_serializer=scalardb__cluster__sql__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ExecuteResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Commit',
                request_serializer=scalardb__cluster__sql__pb2.CommitRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Rollback = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Rollback',
                request_serializer=scalardb__cluster__sql__pb2.RollbackRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.RollbackResponse.FromString,
                _registered_method=True)


class SqlTransactionServicer(object):
    """Service that provides a transaction capability for ScalarDB Cluster SQL.

    First, you call `Begin` to initiate a transaction. Following that, you can call `Execute`to read,
    write, and delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Execute`, `Commit`,
    and `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    def Begin(self, request, context):
        """Begins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Executes a SQL statement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commits a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Rolls back a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqlTransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=scalardb__cluster__sql__pb2.BeginRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.BeginResponse.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=scalardb__cluster__sql__pb2.ExecuteRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ExecuteResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=scalardb__cluster__sql__pb2.CommitRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.CommitResponse.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=scalardb__cluster__sql__pb2.RollbackRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.RollbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.sql.SqlTransaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.sql.SqlTransaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SqlTransaction(object):
    """Service that provides a transaction capability for ScalarDB Cluster SQL.

    First, you call `Begin` to initiate a transaction. Following that, you can call `Execute`to read,
    write, and delete records. To finalize the transaction, call `Commit`. Alternatively, you can
    call `Rollback` at any time before the transaction is committed to cancel it. By calling `Begin`,
    you receive a transaction ID in the response, which you can then use to call `Execute`, `Commit`,
    and `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Begin',
            scalardb__cluster__sql__pb2.BeginRequest.SerializeToString,
            scalardb__cluster__sql__pb2.BeginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Execute',
            scalardb__cluster__sql__pb2.ExecuteRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ExecuteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Commit',
            scalardb__cluster__sql__pb2.CommitRequest.SerializeToString,
            scalardb__cluster__sql__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTransaction/Rollback',
            scalardb__cluster__sql__pb2.RollbackRequest.SerializeToString,
            scalardb__cluster__sql__pb2.RollbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SqlTwoPhaseCommitTransactionStub(object):
    """Service that provides two-phase commit transaction capability for ScalarDB Cluster SQL.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Following that, you can call `Execute` to
    read, write, and delete records. To finalize the transaction, call `Prepare`, `Validate`, and
    then `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction
    is committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Execute`, `Prepare`, `Validate`, `Commit`, and
    `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Begin = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Begin',
                request_serializer=scalardb__cluster__sql__pb2.BeginRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.BeginResponse.FromString,
                _registered_method=True)
        self.Join = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Join',
                request_serializer=scalardb__cluster__sql__pb2.JoinRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.Execute = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Execute',
                request_serializer=scalardb__cluster__sql__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ExecuteResponse.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Prepare',
                request_serializer=scalardb__cluster__sql__pb2.PrepareRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Validate = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Validate',
                request_serializer=scalardb__cluster__sql__pb2.ValidateRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ValidateResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Commit',
                request_serializer=scalardb__cluster__sql__pb2.CommitRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Rollback = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Rollback',
                request_serializer=scalardb__cluster__sql__pb2.RollbackRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.RollbackResponse.FromString,
                _registered_method=True)


class SqlTwoPhaseCommitTransactionServicer(object):
    """Service that provides two-phase commit transaction capability for ScalarDB Cluster SQL.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Following that, you can call `Execute` to
    read, write, and delete records. To finalize the transaction, call `Prepare`, `Validate`, and
    then `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction
    is committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Execute`, `Prepare`, `Validate`, `Commit`, and
    `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    def Begin(self, request, context):
        """Begins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """Joins a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Executes a SQL statement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Prepares a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Validate(self, request, context):
        """Validates a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commits a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Rolls back a transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SqlTwoPhaseCommitTransactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Begin': grpc.unary_unary_rpc_method_handler(
                    servicer.Begin,
                    request_deserializer=scalardb__cluster__sql__pb2.BeginRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.BeginResponse.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=scalardb__cluster__sql__pb2.JoinRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.JoinResponse.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=scalardb__cluster__sql__pb2.ExecuteRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ExecuteResponse.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=scalardb__cluster__sql__pb2.PrepareRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.PrepareResponse.SerializeToString,
            ),
            'Validate': grpc.unary_unary_rpc_method_handler(
                    servicer.Validate,
                    request_deserializer=scalardb__cluster__sql__pb2.ValidateRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ValidateResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=scalardb__cluster__sql__pb2.CommitRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.CommitResponse.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=scalardb__cluster__sql__pb2.RollbackRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.RollbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SqlTwoPhaseCommitTransaction(object):
    """Service that provides two-phase commit transaction capability for ScalarDB Cluster SQL.
    See also: https://github.com/scalar-labs/scalardb/blob/master/docs/two-phase-commit-transactions.md

    First, you call `Begin` to initiate a transaction if you are the coordinator process.
    Alternatively, if you are a participant process, you can call `Join` to take part in a
    transaction that the coordinator has already begun. Following that, you can call `Execute` to
    read, write, and delete records. To finalize the transaction, call `Prepare`, `Validate`, and
    then `Commit` in order. Alternatively, you can call `Rollback` at any time before the transaction
    is committed to cancel it. By calling `Begin` or `Join`, you receive a transaction ID in the
    response, which you can then use to call `Execute`, `Prepare`, `Validate`, `Commit`, and
    `Rollback`.

    Also, you can call `Execute` without a transaction ID. In this case, the SQL statement is
    executed within a one-shot transaction. This method can be used to execute DDL statements as
    well. For details on the supported SQL statements, refer to the ScalarDB SQL Grammar
    (https://github.com/scalar-labs/scalardb-sql/blob/main/docs/grammar.md). Please note, however,
    that `Execute` supports only DML and DDL statements.
    """

    @staticmethod
    def Begin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Begin',
            scalardb__cluster__sql__pb2.BeginRequest.SerializeToString,
            scalardb__cluster__sql__pb2.BeginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Join',
            scalardb__cluster__sql__pb2.JoinRequest.SerializeToString,
            scalardb__cluster__sql__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Execute',
            scalardb__cluster__sql__pb2.ExecuteRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ExecuteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Prepare',
            scalardb__cluster__sql__pb2.PrepareRequest.SerializeToString,
            scalardb__cluster__sql__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Validate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Validate',
            scalardb__cluster__sql__pb2.ValidateRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ValidateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Commit',
            scalardb__cluster__sql__pb2.CommitRequest.SerializeToString,
            scalardb__cluster__sql__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.SqlTwoPhaseCommitTransaction/Rollback',
            scalardb__cluster__sql__pb2.RollbackRequest.SerializeToString,
            scalardb__cluster__sql__pb2.RollbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetadataStub(object):
    """Service that provides a metadata view for ScalarDB Cluster SQL.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListNamespaceMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListNamespaceMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListNamespaceMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListNamespaceMetadataResponse.FromString,
                _registered_method=True)
        self.GetNamespaceMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetNamespaceMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetNamespaceMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetNamespaceMetadataResponse.FromString,
                _registered_method=True)
        self.ListTableMetadataInNamespace = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListTableMetadataInNamespace',
                request_serializer=scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceResponse.FromString,
                _registered_method=True)
        self.GetTableMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetTableMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetTableMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetTableMetadataResponse.FromString,
                _registered_method=True)
        self.GetUserMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetUserMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetUserMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetUserMetadataResponse.FromString,
                _registered_method=True)
        self.ListUserMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListUserMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListUserMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListUserMetadataResponse.FromString,
                _registered_method=True)
        self.GetCurrentUserMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetCurrentUserMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetCurrentUserMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetCurrentUserMetadataResponse.FromString,
                _registered_method=True)
        self.GetPrivileges = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetPrivileges',
                request_serializer=scalardb__cluster__sql__pb2.GetPrivilegesRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetPrivilegesResponse.FromString,
                _registered_method=True)
        self.GetPolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetPolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetPolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetPolicyMetadataResponse.FromString,
                _registered_method=True)
        self.ListPolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListPolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListPolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListPolicyMetadataResponse.FromString,
                _registered_method=True)
        self.GetLevelMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetLevelMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetLevelMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetLevelMetadataResponse.FromString,
                _registered_method=True)
        self.ListLevelMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListLevelMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListLevelMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListLevelMetadataResponse.FromString,
                _registered_method=True)
        self.GetCompartmentMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetCompartmentMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetCompartmentMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetCompartmentMetadataResponse.FromString,
                _registered_method=True)
        self.ListCompartmentMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListCompartmentMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListCompartmentMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListCompartmentMetadataResponse.FromString,
                _registered_method=True)
        self.GetGroupMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetGroupMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetGroupMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetGroupMetadataResponse.FromString,
                _registered_method=True)
        self.ListGroupMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListGroupMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListGroupMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListGroupMetadataResponse.FromString,
                _registered_method=True)
        self.GetUserTagInfo = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetUserTagInfo',
                request_serializer=scalardb__cluster__sql__pb2.GetUserTagInfoRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetUserTagInfoResponse.FromString,
                _registered_method=True)
        self.GetNamespacePolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetNamespacePolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataResponse.FromString,
                _registered_method=True)
        self.ListNamespacePolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListNamespacePolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataResponse.FromString,
                _registered_method=True)
        self.GetTablePolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/GetTablePolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.GetTablePolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.GetTablePolicyMetadataResponse.FromString,
                _registered_method=True)
        self.ListTablePolicyMetadata = channel.unary_unary(
                '/scalardb.cluster.rpc.v1.sql.Metadata/ListTablePolicyMetadata',
                request_serializer=scalardb__cluster__sql__pb2.ListTablePolicyMetadataRequest.SerializeToString,
                response_deserializer=scalardb__cluster__sql__pb2.ListTablePolicyMetadataResponse.FromString,
                _registered_method=True)


class MetadataServicer(object):
    """Service that provides a metadata view for ScalarDB Cluster SQL.
    """

    def ListNamespaceMetadata(self, request, context):
        """Retrieves a list of namespace metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespaceMetadata(self, request, context):
        """Retrieves namespace metadata of the specified namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTableMetadataInNamespace(self, request, context):
        """Retrieves table metadata of tables in the specified namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTableMetadata(self, request, context):
        """Retrieves table metadata of the specified table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserMetadata(self, request, context):
        """
        Auth related endpoints


        Retrieves user metadata of the specified user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUserMetadata(self, request, context):
        """Retrieves user metadata of all users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentUserMetadata(self, request, context):
        """Retrieves the metadata of the current user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivileges(self, request, context):
        """Retrieves the privileges of the specified user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicyMetadata(self, request, context):
        """
        Attribute-based access control (ABAC) related endpoints


        Retrieves the metadata of the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPolicyMetadata(self, request, context):
        """Retrieves the metadata of all policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLevelMetadata(self, request, context):
        """Retrieves the metadata of the specified level in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLevelMetadata(self, request, context):
        """Retrieves the metadata of all levels in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompartmentMetadata(self, request, context):
        """Retrieves the metadata of the specified compartment in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCompartmentMetadata(self, request, context):
        """Retrieves the metadata of all compartments in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupMetadata(self, request, context):
        """Retrieves the metadata of the specified group in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupMetadata(self, request, context):
        """Retrieves the metadata of all groups in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserTagInfo(self, request, context):
        """Retrieves the user tag information of the specified user in the specified policy.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespacePolicyMetadata(self, request, context):
        """Retrieves the metadata of the namespace policy for the specified policy and the specified namespace.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNamespacePolicyMetadata(self, request, context):
        """Retrieves the list of the metadata of all namespace policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTablePolicyMetadata(self, request, context):
        """Retrieves the metadata of the table policy for the specified policy and the specified table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTablePolicyMetadata(self, request, context):
        """Retrieves the list of the metadata of all table policies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListNamespaceMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaceMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListNamespaceMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListNamespaceMetadataResponse.SerializeToString,
            ),
            'GetNamespaceMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespaceMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetNamespaceMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetNamespaceMetadataResponse.SerializeToString,
            ),
            'ListTableMetadataInNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTableMetadataInNamespace,
                    request_deserializer=scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceResponse.SerializeToString,
            ),
            'GetTableMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTableMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetTableMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetTableMetadataResponse.SerializeToString,
            ),
            'GetUserMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetUserMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetUserMetadataResponse.SerializeToString,
            ),
            'ListUserMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUserMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListUserMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListUserMetadataResponse.SerializeToString,
            ),
            'GetCurrentUserMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentUserMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetCurrentUserMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetCurrentUserMetadataResponse.SerializeToString,
            ),
            'GetPrivileges': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivileges,
                    request_deserializer=scalardb__cluster__sql__pb2.GetPrivilegesRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetPrivilegesResponse.SerializeToString,
            ),
            'GetPolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetPolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetPolicyMetadataResponse.SerializeToString,
            ),
            'ListPolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListPolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListPolicyMetadataResponse.SerializeToString,
            ),
            'GetLevelMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLevelMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetLevelMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetLevelMetadataResponse.SerializeToString,
            ),
            'ListLevelMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLevelMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListLevelMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListLevelMetadataResponse.SerializeToString,
            ),
            'GetCompartmentMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompartmentMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetCompartmentMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetCompartmentMetadataResponse.SerializeToString,
            ),
            'ListCompartmentMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCompartmentMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListCompartmentMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListCompartmentMetadataResponse.SerializeToString,
            ),
            'GetGroupMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetGroupMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetGroupMetadataResponse.SerializeToString,
            ),
            'ListGroupMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroupMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListGroupMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListGroupMetadataResponse.SerializeToString,
            ),
            'GetUserTagInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTagInfo,
                    request_deserializer=scalardb__cluster__sql__pb2.GetUserTagInfoRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetUserTagInfoResponse.SerializeToString,
            ),
            'GetNamespacePolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespacePolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataResponse.SerializeToString,
            ),
            'ListNamespacePolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespacePolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataResponse.SerializeToString,
            ),
            'GetTablePolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTablePolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.GetTablePolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.GetTablePolicyMetadataResponse.SerializeToString,
            ),
            'ListTablePolicyMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTablePolicyMetadata,
                    request_deserializer=scalardb__cluster__sql__pb2.ListTablePolicyMetadataRequest.FromString,
                    response_serializer=scalardb__cluster__sql__pb2.ListTablePolicyMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scalardb.cluster.rpc.v1.sql.Metadata', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scalardb.cluster.rpc.v1.sql.Metadata', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Metadata(object):
    """Service that provides a metadata view for ScalarDB Cluster SQL.
    """

    @staticmethod
    def ListNamespaceMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListNamespaceMetadata',
            scalardb__cluster__sql__pb2.ListNamespaceMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListNamespaceMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespaceMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetNamespaceMetadata',
            scalardb__cluster__sql__pb2.GetNamespaceMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetNamespaceMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTableMetadataInNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListTableMetadataInNamespace',
            scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListTableMetadataInNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTableMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetTableMetadata',
            scalardb__cluster__sql__pb2.GetTableMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetTableMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetUserMetadata',
            scalardb__cluster__sql__pb2.GetUserMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetUserMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUserMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListUserMetadata',
            scalardb__cluster__sql__pb2.ListUserMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListUserMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentUserMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetCurrentUserMetadata',
            scalardb__cluster__sql__pb2.GetCurrentUserMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetCurrentUserMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivileges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetPrivileges',
            scalardb__cluster__sql__pb2.GetPrivilegesRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetPrivilegesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetPolicyMetadata',
            scalardb__cluster__sql__pb2.GetPolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetPolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListPolicyMetadata',
            scalardb__cluster__sql__pb2.ListPolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListPolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLevelMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetLevelMetadata',
            scalardb__cluster__sql__pb2.GetLevelMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetLevelMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLevelMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListLevelMetadata',
            scalardb__cluster__sql__pb2.ListLevelMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListLevelMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompartmentMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetCompartmentMetadata',
            scalardb__cluster__sql__pb2.GetCompartmentMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetCompartmentMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCompartmentMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListCompartmentMetadata',
            scalardb__cluster__sql__pb2.ListCompartmentMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListCompartmentMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroupMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetGroupMetadata',
            scalardb__cluster__sql__pb2.GetGroupMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetGroupMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGroupMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListGroupMetadata',
            scalardb__cluster__sql__pb2.ListGroupMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListGroupMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserTagInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetUserTagInfo',
            scalardb__cluster__sql__pb2.GetUserTagInfoRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetUserTagInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespacePolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetNamespacePolicyMetadata',
            scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetNamespacePolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNamespacePolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListNamespacePolicyMetadata',
            scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListNamespacePolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTablePolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/GetTablePolicyMetadata',
            scalardb__cluster__sql__pb2.GetTablePolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.GetTablePolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTablePolicyMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scalardb.cluster.rpc.v1.sql.Metadata/ListTablePolicyMetadata',
            scalardb__cluster__sql__pb2.ListTablePolicyMetadataRequest.SerializeToString,
            scalardb__cluster__sql__pb2.ListTablePolicyMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
